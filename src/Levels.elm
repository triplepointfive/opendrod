module Levels exposing (..)

import Array

import Level exposing (..)

level1 : Level
level1 =
  { blueprint =
      buildBlueprint
        [ "################################"
        , "############### ################"
        , "############### ################"
        , "############### ################"
        , "############### ################"
        , "############### ################"
        , "############### ################"
        , "############### ################"
        , "############       #############"
        , "############       #############"
        , "############       #############"
        , "############       #############"
        , "############       #############"
        , "############       #############"
        , "############       #############"
        , "############       #############"
        , "############       #############"
        , "############### ################"
        , "############### ################"
        , "############### ################"
        , "############### ################"
        , "############### ################"
        , "############### ################"
        , "############### ################"
        , "############### ################"
        , "############### ################"
        , "############### ################"
        , "############### ################"
        , "############### ################"
        , "############### ################"
        , "############### ################"
        , "############### ################"
        ]
        [ (337, Orb [(0, Open)])
        , (401, Orb [(1, Toggle), (2, Toggle)])
        , (465, Orb [(2, Close)])
        , (559, Obstical 0 Pushed)
        , (623, Obstical 1 InGround)
        , (687, Obstical 2 Pushed)
        ]
  , creatures = []
  , swordPos = 79
  , playerCoord = 47
  , playerDir = S
  , width = 32
  , pos = (0, 0)
  }

level2 : Level
level2 =
  { blueprint =
      buildBlueprint
        [ "############### ################"
        , "############### ################"
        , "############### ################"
        , "############### ################"
        , "############### ################"
        , "############### ################"
        , "############### ################"
        , "############### ################"
        , "############### ################"
        , "############### ################"
        , "############       #############"
        , "############ ##### #############"
        , "############       #############"
        , "############       #############"
        , "##############   ###############"
        , "############       #############"
        , "############ ##### #############"
        , "############ ##### #############"
        , "############       #############"
        , "############       #############"
        , "############### ################"
        , "############### ################"
        , "############### ################"
        , "############### ################"
        , "############### ################"
        , "############### ################"
        , "############### ################"
        , "############### ################"
        , "############### ################"
        , "############### ################"
        , "############### ################"
        , "############### ################"
        ]
        []
  , creatures = [687 - 64 * 3]
  , swordPos = 79 + 64 * 6
  , playerCoord = 47 + 64 * 6
  , playerDir = S
  , width = 32
  , pos = (0, -1)
  }

buildBlueprint : List String -> List (Coord, Tile) -> Array.Array Tile
buildBlueprint walls tiles =
  let
    buildTile i char =
      case List.filter (\(j, _) -> i == j) tiles of
        (_, t) :: _ -> t
        _ -> case char of
                '#' -> Wall
                _ -> Floor
  in
  Array.indexedMap buildTile <| Array.fromList <| List.concatMap String.toList walls
