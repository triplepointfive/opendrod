module Levels exposing (..)

import Array
import Dict

import Level exposing (..)
import Utils exposing (Point)

level1 : Point -> Dir -> Level
level1 (px, py) dir =
  { blueprint =
      buildBlueprint
        [ "################################"
        , "##############   ###############"
        , "##############   ###############"
        , "##############   ###############"
        , "##############   ###############"
        , "##############   ###############"
        , "##############   ###############"
        , "##############   ###############"
        , "############       #############"
        , "############       #############"
        , "############     a #############"
        , "############       #############"
        , "############     b #############"
        , "############       #############"
        , "############     c #############"
        , "############       #############"
        , "############       #############"
        , "##############   ###############"
        , "##############AAA###############"
        , "##############   ###############"
        , "##############   ###############"
        , "##############BBB###############"
        , "##############   ###############"
        , "##############   ###############"
        , "##############CCC###############"
        , "##############   ###############"
        , "##############   ###############"
        , "##############   ###############"
        , "##############   ###############"
        , "##############   ###############"
        , "##############   ###############"
        , "##############   ###############"
        ]
        [ ('a', Orb [(0, Open)])
        , ('b', Orb [(1, Toggle), (2, Toggle)])
        , ('c', Orb [(2, Close)])
        , ('A', Obstical 0 Pushed)
        , ('B', Obstical 1 InGround)
        , ('C', Obstical 2 Pushed)
        ]
  , creatures = []
  , width = 32
  , pos = (0, 0)

  , swordPos = dirCoord 32 (px + py * 32) dir
  , playerCoord = (px + py * 32)
  , playerDir = dir
  }

level2 : Point -> Dir -> Level
level2 (px, py) dir =
  { blueprint =
      buildBlueprint
        [ "##############   ###############"
        , "##############   ###############"
        , "##############   ###############"
        , "##############   ###############"
        , "##############   ###############"
        , "##############   ###############"
        , "##############   ###############"
        , "##############   ###############"
        , "##############   ###############"
        , "##############   ###############"
        , "############       #############"
        , "############ ##### #############"
        , "############       #############"
        , "############       #############"
        , "##############   ###############"
        , "############       #############"
        , "############ ##### #############"
        , "############ ##### #############"
        , "############       #############"
        , "############       #############"
        , "##############   ###############"
        , "##############   ###############"
        , "##############   ###############"
        , "##############   ###############"
        , "##############   ###############"
        , "##############   ###############"
        , "##############   ###############"
        , "##############   ###############"
        , "##############   ###############"
        , "##############   ###############"
        , "##############   ###############"
        , "##############   ###############"
        ]
        []
  , creatures = [687]
  , width = 32
  , pos = (0, 1)

  , swordPos = dirCoord 32 (px + py * 32) dir
  , playerCoord = (px + py * 32)
  , playerDir = dir
  }

buildBlueprint : List String -> List (Char, Tile) -> Array.Array Tile
buildBlueprint walls tiles =
  let
    tilesMap = Dict.fromList tiles

    buildTile i char =
      case Dict.get char tilesMap of
        Just t -> t
        Nothing -> case char of
          '#' -> Wall
          _ -> Floor
  in
  Array.indexedMap buildTile <| Array.fromList <| List.concatMap String.toList walls
